plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.41'
    id 'jacoco'
    id 'java'
    id 'com.github.dawnwords.jacoco.badge' version "0.1.0"
}

jacocoBadgeGenSetting {
    jacocoReportPath "$buildDir/reports/jacoco/testCommonUnitTestCoverage/testCommonUnitTestCoverage.xml"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.95
            }
        }
    }

    def excludes = [
            '**/*Test*.*'
    ]
    def coverageSourceDirs = [
            "src/commonMain/kotlin"
    ]

    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(files("${project.buildDir}/jacoco/jvmTest.exec"))
    getClassDirectories().setFrom(fileTree(
            dir: "${project.buildDir}/classes/kotlin/jvm/",
            excludes: excludes
    ))
}


repositories {
    mavenCentral()
    jcenter()
    jcenter {
        url 'https://hmrc.bintray.com/releases/'
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

group 'uk.gov.hmrc'
version '0.0.1'

apply plugin: 'maven-publish'
String frameworkName = 'TaxKalculator'

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")    \
                             ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework(frameworkName)
            }
        }
        fromPreset(presets.jvm, 'jvm')
    }

    sourceSets {
        def klockVersion = "1.5.0"
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "com.soywiz.korlibs.klock:klock:$klockVersion"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        iosMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        iosTest {}
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework(frameworkName, mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode

configurations {
    compileClasspath
}

jacoco {
    toolVersion = "0.8.4"
}


// Create gradle task
task "testCommonUnitTestCoverage"(type: JacocoReport, dependsOn: "allTests") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports on the common module build."

    def excludes = [
            '**/*Test*.*'
    ]
    def coverageSourceDirs = [
            "src/commonMain/kotlin"
    ]

    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(files("${project.buildDir}/jacoco/jvmTest.exec"))
    getClassDirectories().setFrom(fileTree(
            dir: "${project.buildDir}/classes/kotlin/jvm/",
            excludes: excludes
    ))
    reports {
        xml.enabled = true
        html.enabled = true
    }
}


task cleanBuildTestCoverage(type: GradleBuild) {
    tasks = ['clean', 'cleanAllTests', 'build','testCommonUnitTestCoverage', 'generateJacocoBadge', 'jacocoTestCoverageVerification']
}

